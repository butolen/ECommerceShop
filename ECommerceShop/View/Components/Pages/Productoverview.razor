@page "/products"
@rendermode InteractiveServer
@layout MainLayout
@inject ShopContext Db
@inject NavigationManager Navigation
@inject IStoreService Ss
@inject SessionState Session
@using ECommerceShop.Configurations
@using ECommerceShop.DLL
@using ECommerceShop.Entities
@using Microsoft.EntityFrameworkCore
@using View.Components.Layout
@inject LocalStorageService LocalStorage

<style>
    .card-img-top {
        width: 100%;
        height: 200px;
        object-fit: cover;
        object-position: center;
    }

    .custom-nav-link {
        color: black;
        font-weight: 500;
        font-size: 1.2rem;
        padding: 7px 14px;
        border-radius: 6px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .custom-nav-link:hover {
        background-color: #f0f0f0;
        color: #000;
        text-decoration: none;
    }

    .logout-btn {
        background-color: transparent;
        border: 2px solid #1f1f1f;
        color: #1f1f1f;
        padding: 6px 16px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .logout-btn:hover {
        background-color: #1f1f1f;
        color: white;
    }
</style>

<nav class="navbar navbar-light bg-light shadow-sm py-3">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand fw-bold text-dark" href="/">BulkBase</a>
        <div class="d-flex align-items-center gap-3">
            <a class="nav-link custom-nav-link" href="/">Start</a>
            <a class="nav-link custom-nav-link" href="/products">Produkte</a>
        </div>
        <div class="d-flex align-items-center gap-3">
            <button class="btn logout-btn fw-semibold" @onclick="Logout">Ausloggen</button>
            <a class="nav-link position-relative" href="/cart">
                <img src="images/warenkorb.jpg" alt="Cart" style="height: 30px;" />
            </a>
        </div>
    </div>
</nav>

<h1 class="text-center fw-bold fs-1 mb-5">Bulk Base</h1>
<div class="container">
    <section>
        <h2 class="fs-4 mb-3"><span style="color:#C30017;">▌</span> Unsere Produkte</h2>

        <div class="row mb-4 g-3">
            <div class="col-12 col-md-6 col-lg-4">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Produktname suchen..."
                           @bind="searchTerm" @bind:event="oninput" />
                    <button class="btn btn-outline-secondary" @onclick="SearchProducts">🔍</button>
                    <button class="btn btn-outline-danger" @onclick="ClearSearch">✖</button>
                </div>
            </div>

            <div class="col-12 col-md-6 col-lg-8">
                <div class="d-flex flex-wrap gap-2">
                    @foreach (var category in categoryFilters.Keys)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@category"
                                   checked="@CategoryValue(category)"
                                   @onchange="async e => await SetCategory(category, ((ChangeEventArgs)e).Value is bool b && b)" />
                            <label class="form-check-label" for="@category">@category</label>
                        </div>
                    }
                </div>
            </div>

            <div class="col-12 col-md-6 col-lg-4">
                <label class="form-label fw-bold">Preis</label>
                <div class="input-group">
                    <input type="number" class="form-control" placeholder="von" @bind="priceFrom" />
                    <input type="number" class="form-control" placeholder="bis" @bind="priceTo" />
                    <button class="btn btn-outline-secondary" @onclick="SearchProducts">🔍</button>
                </div>
            </div>

            <div class="col-12 col-md-6 col-lg-4">
                <label class="form-label fw-bold">Mindestbewertung (1–5)</label>
                <div class="input-group">
                    <input type="number" class="form-control" min="1" max="5" step="1" @bind="minRating" />
                    <button class="btn btn-outline-secondary" @onclick="SearchProducts">🔍</button>
                </div>
            </div>
        </div>

        <h3 class="fs-2 fw-bold mb-4">Entdecke die Welt des Sports</h3>

        @if (products == null)
        {
            <p>Loading products...</p>
        }
        else
        {
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
                @foreach (var product in showAll ? products : products.Take(3))
                {
                    <div class="col">
                        <div class="card h-100">
                            <img src="@product.Image" class="card-img-top" alt="@product.Name">
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text">@product.Description</p>
                                <p class="fw-bold">@product.Price.ToString("0.00") €</p>
                                <button class="btn text-white w-100" style="background-color:#C30017;"
                                        @onclick="() => NavigateToProduct(product.ProductId)">Zum Produkt</button>
                                <button class="btn btn-outline-dark w-100 mt-2"
                                        @onclick="() => AddToCart(product)">In den Warenkorb</button>
                                @if (productReviewMap.TryGetValue(product.ProductId, out var reviews) && reviews.Any())
                                {
                                    var avgRating = reviews.Average(r => r.Rating);
                                    <p class="mb-1">⭐ @avgRating.ToString("0.0")</p>
                                }
                                else
                                {
                                    <p class="text-muted mb-1">Noch keine Bewertungen</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (!showAll)
        {
            <div class="text-center mt-4">
                <button class="btn btn-outline-dark px-5" @onclick="OnViewAllClicked">Zeige mehr</button>
            </div>
        }
    </section>
</div>

<div class="container-fluid bg-dark text-white py-5 mt-5">
    <div class="row text-center">
        <div class="col-12 col-md-4 mb-4 mb-md-0">
            <i class="bi bi-truck fs-2"></i>
            <h5 class="mt-2">Schnelle Lieferung</h5>
            <p>Kostenlose Lieferung ab 140€</p>
        </div>
        <div class="col-12 col-md-4 mb-4 mb-md-0">
            <i class="bi bi-headset fs-2"></i>
            <h5 class="mt-2">Kundenservice</h5>
            <p>Per E-Mail erreichbar</p>
        </div>
        <div class="col-12 col-md-4">
            <i class="bi bi-arrow-counterclockwise fs-2"></i>
            <h5 class="mt-2">Geld zurück Garantie</h5>
            <p>30 Tage Rückgabe</p>
        </div>
    </div>
</div>

@code {
    private List<Product>? products;
    private bool showAll = true;
    private bool _initialized = false;
    private string searchTerm = "";
    private decimal? priceFrom;
    private decimal? priceTo;
    private int? minRating = null;

    private Dictionary<string, bool> categoryFilters = new()
    {
        { "Hanteln", false },
        { "Geräte", false },
        { "Zubehör", false }
    };

    private Dictionary<int, List<Review>> productReviewMap = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;
            var username = await LocalStorage.GetUsername();
            if (string.IsNullOrEmpty(username))
                Navigation.NavigateTo("/login", forceLoad: true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        products = await Db.Products.ToListAsync();
        productReviewMap = products.ToDictionary(
            p => p.ProductId,
            p => Ss.GetReviewsForProduct(p.ProductId));
    }

    private void OnViewAllClicked() => showAll = true;
    private void NavigateToProduct(int productId) => Navigation.NavigateTo($"/product/{productId}");

    private async Task AddToCart(Product product)
    {
        var username = await LocalStorage.GetUsername();
        var success = Ss.AddToCart(username, product.ProductId, 1);
        if (!success)
            Console.WriteLine("Nicht genügend Lagerbestand verfügbar.");
    }

    private async Task SearchProducts()
    {
        var allProducts = await Db.Products.ToListAsync();
        IEnumerable<Product> filtered = allProducts;

        if (!string.IsNullOrWhiteSpace(searchTerm))
            filtered = filtered.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        var selectedCategories = categoryFilters.Where(c => c.Value).Select(c => c.Key).ToList();
        if (selectedCategories.Any())
            filtered = filtered.Where(p => selectedCategories.Contains(p.Category, StringComparer.OrdinalIgnoreCase));

        if (priceFrom.HasValue)
            filtered = filtered.Where(p => p.Price >= priceFrom.Value);

        if (priceTo.HasValue)
            filtered = filtered.Where(p => p.Price <= priceTo.Value);

        if (minRating is >= 1 and <= 5)
        {
            filtered = filtered.Where(p =>
            {
                var reviews = Ss.GetReviewsForProduct(p.ProductId);
                if (reviews == null || reviews.Count == 0) return false;
                var avg = reviews.Average(r => r.Rating);
                return avg >= minRating.Value;
            });
        }

        products = filtered.ToList();
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        await SearchProducts();
    }

    private bool CategoryValue(string key) => categoryFilters[key];
    private async Task SetCategory(string key, bool value)
    {
        categoryFilters[key] = value;
        await SearchProducts();
    }

    private async Task Logout()
    {
        await LocalStorage.ClearUserData();
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}
