@page "/Admin"
@rendermode InteractiveServer
@using ECommerceShop.Configurations
@using ECommerceShop.DLL
@using ECommerceShop.Entities
@inject ShopContext Db
@inject IStoreService StoreService
@inject SessionState Session
@inject LocalStorageService LocalStorage
@inject NavigationManager Navigation

<nav class="navbar navbar-light bg-light shadow-sm py-3">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand fw-bold text-dark" href="/">BulkBase</a>
        <div class="d-flex align-items-center gap-3">
            <a class="nav-link custom-nav-link" href="/">Start</a>
            <a class="nav-link custom-nav-link" href="/products">Produkte</a>
            <a class="nav-link custom-nav-link" href="/admin">Admin</a>
        </div>
        <div class="d-flex align-items-center gap-3">
            <button class="btn logout-btn fw-semibold" @onclick="Logout">Ausloggen</button>
            <a class="nav-link position-relative" href="/cart">
                <img src="images/warenkorb.jpg" alt="Warenkorb" style="height: 30px;" />
            </a>
        </div>
    </div>
</nav>

<style>
    body {
        background-color: #d3d3d3 !important;
    }

    .custom-nav-link {
        color: black;
        font-weight: 500;
        font-size: 1.2rem;
        padding: 7px 14px;
        border-radius: 6px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .custom-nav-link:hover {
        background-color: #f0f0f0;
        color: #000;
        text-decoration: none;
    }

    .logout-btn {
        background-color: transparent;
        border: 2px solid #1f1f1f;
        color: #1f1f1f;
        padding: 6px 16px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .logout-btn:hover {
        background-color: #1f1f1f;
        color: white;
    }

    .admin-header {
        background-color: #1d5cf2;
        color: white;
        padding: 20px;
        text-align: center;
        font-size: 1.75rem;
        font-weight: bold;
        margin-bottom: 30px;
    }

    .admin-card {
        background-color: #f3f3f3;
        padding: 20px;
        border-radius: 6px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        min-width: 250px;
    }

    .admin-card h2 {
        font-size: 1.2rem;
        margin-bottom: 10px;
    }

    .admin-input {
        width: 100%;
        padding: 8px;
        margin-bottom: 12px;
        border: 2px solid black;
        border-radius: 4px;
        font-weight: bold;
    }

    .admin-button {
        background-color: #2b1a8c;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 20px;
        font-weight: bold;
        width: 100%;
    }

    .admin-button:hover {
        background-color: #1a0d66;
    }

    .admin-textarea {
        width: 100%;
        height: 120px;
        padding: 10px;
        margin-bottom: 12px;
        border: 2px solid black;
        border-radius: 4px;
        resize: none;
        font-weight: bold;
    }
</style>

<div class="container">
    <div class="admin-header">Admin-Bereich</div>

    <div class="d-flex flex-wrap gap-5 justify-content-center">
        <div class="d-flex flex-column gap-5">
            <!-- Benutzer löschen -->
            <div class="admin-card">
                <h2>Benutzer löschen</h2>
                <input class="admin-input" type="text" placeholder="Benutzername" @bind="deleteUsername" />
                <button class="admin-button" @onclick="HandleDeleteUser">Löschen</button>
            </div>

            <!-- Produkt löschen -->
            <div class="admin-card">
                <h2>Produkt löschen</h2>
                <input class="admin-input" type="text" placeholder="Produktname" @bind="deleteProductName" />
                <button class="admin-button" @onclick="HandleDeleteProduct">Löschen</button>
            </div>
        </div>

        <!-- Produkt hinzufügen -->
        <div class="admin-card" style="max-width: 500px;">
            <h2>Produkt hinzufügen</h2>

            <div class="d-flex gap-2">
                <input class="admin-input" style="flex:1;" type="text" placeholder="Name" @bind="newProduct.Name" />
                <input class="admin-input" style="flex:1;" type="text" placeholder="Lagerbestand" @bind="newProduct.InStock" />
            </div>

            <div class="d-flex gap-2">
                <input class="admin-input" style="flex:1;" type="text" placeholder="Preis" @bind="newProduct.Price" />
                <input class="admin-input" style="flex:1;" type="text" placeholder="Kategorie" @bind="newProduct.Category" />
            </div>

            <textarea class="admin-textarea" placeholder="Beschreibung..." @bind="newProduct.Description"></textarea>

            <InputFile OnChange="HandleImageUpload" class="admin-button" />

            <div class="d-flex gap-3 mt-2">
                <button class="admin-button" @onclick="HandleAddProduct">Hinzufügen</button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <p class="text-success text-center mt-4">@message</p>
    }
</div>

@code {
private string deleteUsername;
private string deleteProductName;
private string message;
private Product newProduct = new();

private void HandleDeleteUser()
{
    bool success = StoreService.DeleteUser(deleteUsername);
    message = success ? "Benutzer erfolgreich gelöscht." : "Benutzer nicht gefunden.";
}

private void HandleAddProduct()
{
    try
    {
        StoreService.AddProduct(newProduct);
        message = "Produkt erfolgreich hinzugefügt.";
        newProduct = new(); // zurücksetzen
    }
    catch (Exception ex)
    {
        message = $"Fehler: {ex.Message}";
    }
}

private async Task HandleImageUpload(InputFileChangeEventArgs e)
{
    var file = e.File;
    if (file != null)
    {
        var ext = Path.GetExtension(file.Name).ToLower();
        var allowed = new[] { ".jpg", ".jpeg", ".png", ".webp" };
        if (!allowed.Contains(ext))
        {
            message = "Nur JPG, PNG oder WEBP erlaubt.";
            return;
        }

        var uniqueName = $"{Guid.NewGuid()}{ext}";
        var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", uniqueName);

        await using var stream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(stream);

        newProduct.Image = $"images/{uniqueName}";
        message = $"Bild erfolgreich hochgeladen als {uniqueName}.";
    }
}

private void HandleDeleteProduct()
{
    bool success = StoreService.DeleteProduct(deleteProductName);
    message = success ? "Produkt erfolgreich gelöscht." : "Produkt nicht gefunden.";
}

private async Task Logout()
{
    await LocalStorage.ClearUserData();
    Navigation.NavigateTo("/login", forceLoad: true);
}

private bool _initialized = false;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender && !_initialized)
    {
        _initialized = true;

        var username = await LocalStorage.GetUsername();
        if (string.IsNullOrEmpty(username))
        {
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }

        var role = await LocalStorage.GetRole();
        if (!string.Equals(role, "admin", StringComparison.OrdinalIgnoreCase))
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }
}
}
