@page "/Admin"
@rendermode InteractiveServer
@using ECommerceShop.Configurations
@using ECommerceShop.DLL
@using ECommerceShop.Entities
@inject ShopContext Db
@inject IStoreService StoreService
@inject SessionState Session
@inject LocalStorageService LocalStorage
@inject NavigationManager Navigation

<nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm py-3">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand fw-bold fs-3 text-dark" href="/" style="margin-right: 30px;">BulkBase</a>
        <div class="d-flex align-items-center gap-2">
            <a class="nav-link custom-nav-link" href="/">Start</a>
            <a class="nav-link custom-nav-link" href="/products">Produkte</a>
        </div>
        <div class="d-flex align-items-center gap-3">
            <button class="btn logout-btn fw-semibold" @onclick="Logout">Ausloggen</button>
            <a class="nav-link position-relative" href="/cart">
                <img src="images/warenkorb.jpg" alt="Cart" style="height: 30px;" />
            </a>
        </div>
    </div>
</nav>

<style>
    body {
        background-color: #d3d3d3 !important;
    }

    .custom-nav-link {
        color: black;
        font-weight: 500;
        font-size: 1.2rem;
        padding: 7px 14px;
        border-radius: 6px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .custom-nav-link:hover {
        background-color: #f0f0f0;
        color: #000;
        text-decoration: none;
    }

    .logout-btn {
        background-color: transparent;
        border: 2px solid #1f1f1f;
        color: #1f1f1f;
        padding: 6px 16px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .logout-btn:hover {
        background-color: #1f1f1f;
        color: white;
    }

    .admin-header {
        background-color: #1d5cf2;
        color: white;
        padding: 20px;
        text-align: center;
        font-size: 1.75rem;
        font-weight: bold;
        margin-bottom: 30px;
    }

    .admin-card {
        background-color: #f3f3f3;
        padding: 20px;
        border-radius: 6px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        min-width: 250px;
    }

    .admin-card h2 {
        font-size: 1.2rem;
        margin-bottom: 10px;
    }

    .admin-input {
        width: 100%;
        padding: 8px;
        margin-bottom: 12px;
        border: 2px solid black;
        border-radius: 4px;
        font-weight: bold;
    }

    .admin-button {
        background-color: #691c1c;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 20px;
        font-weight: bold;
        width: 100%;
    }

    .admin-button:hover {
        background-color: #8c1f1f;
    }

    .upload-button {
        background-color: #2b1a8c;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 20px;
        font-weight: bold;
        width: 100%;
    }

    .admin-textarea {
        width: 100%;
        height: 120px;
        padding: 10px;
        margin-bottom: 12px;
        border: 2px solid black;
        border-radius: 4px;
        resize: none;
        font-weight: bold;
    }
</style>

<div class="container">
    <div class="admin-header">ADMIN SITE</div>

    <div class="d-flex flex-wrap gap-5 justify-content-center">

        <!-- Delete a user -->
        <div class="admin-card">
            <h2>Delete a user</h2>
            <input class="admin-input" type="text" placeholder="User" @bind="deleteUsername" />
            <button class="admin-button" @onclick="HandleDeleteUser">Delete</button>
        </div>

        <!-- Add a product -->
        <div class="admin-card" style="max-width: 500px;">
            <h2>Add a product</h2>

            <div class="d-flex gap-2">
                <input class="admin-input" style="flex:1;" type="text" placeholder="Name" @bind="newProduct.Name" />
                <input class="admin-input" style="flex:1;" type="text" placeholder="InStock" @bind="newProduct.InStock" />
            </div>

            <div class="d-flex gap-2">
                <input class="admin-input" style="flex:1;" type="text" placeholder="Price" @bind="newProduct.Price" />
                <input class="admin-input" style="flex:1;" type="text" placeholder="Category" @bind="newProduct.Category" />
            </div>

            <textarea class="admin-textarea" placeholder="Description..." @bind="newProduct.Description"></textarea>

            <input class="admin-input" type="text" placeholder="Image filename (e.g. img1.jpg)" @bind="newProduct.Image" />

            <div class="d-flex gap-3 mt-2">
                <button class="upload-button" disabled>Upload Image</button>
                <button class="admin-button" @onclick="HandleAddProduct">Add</button>
            </div>
        </div>

        <!-- Delete a product -->
        <div class="admin-card">
            <h2>Delete a product</h2>
            <input class="admin-input" type="text" placeholder="Name" @bind="deleteProductName" />
            <button class="admin-button" @onclick="HandleDeleteProduct">Delete</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
    <p class="text-success text-center mt-4">@message</p>
    }
</div>

@code {
private string deleteUsername;
private string deleteProductName;
private string message;
private Product newProduct = new();
private string adminEmail = "admin@example.com";

private void HandleDeleteUser()
{
bool success = StoreService.DeleteUser(deleteUsername);
message = success ? "User deleted successfully." : "User not found.";
}

private void HandleAddProduct()
{
try
{
StoreService.AddProduct(newProduct);
message = "Product added successfully.";
newProduct = new(); // reset
}
catch (Exception ex)
{
message = $"Error: {ex.Message}";
}
}

private void HandleDeleteProduct()
{
bool success = StoreService.DeleteProduct(deleteProductName);
message = success ? "Product deleted successfully." : "Product not found.";
}

private async Task Logout()
{
await LocalStorage.ClearUserData();
Navigation.NavigateTo("/login", forceLoad: true);
}

private bool _initialized = false;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender && !_initialized)
{
_initialized = true;

var username = await LocalStorage.GetUsername();
if (string.IsNullOrEmpty(username))
{
Navigation.NavigateTo("/login", forceLoad: true);
return;
}

var role = await LocalStorage.GetRole();
if (!string.Equals(role, "admin", StringComparison.OrdinalIgnoreCase))
{
Navigation.NavigateTo("/", forceLoad: true);
}
}
}
}
