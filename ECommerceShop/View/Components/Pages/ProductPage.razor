@page "/product/{ProductId:int}"
@rendermode InteractiveServer
@layout MainLayout
@inject ShopContext Db
@inject NavigationManager Navigation
@inject IStoreService Ss
@inject LocalStorageService LocalStorage

@using ECommerceShop.Configurations
@using ECommerceShop.DLL
@using ECommerceShop.Entities
@using Microsoft.EntityFrameworkCore
@using View.Components.Layout

<style>
    .custom-nav-link {
        color: black;
        font-weight: 500;
        font-size: 1.2rem;
        padding: 7px 14px;
        border-radius: 6px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .custom-nav-link:hover {
        background-color: #f0f0f0;
        color: #000;
        text-decoration: none;
    }

    .logout-btn {
        background-color: transparent;
        border: 2px solid #1f1f1f;
        color: #1f1f1f;
        padding: 6px 16px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .logout-btn:hover {
        background-color: #1f1f1f;
        color: white;
    }

    .thumbnail-img {
        max-width: 100%;
        height: auto;
        margin-bottom: 10px;
    }
</style>
<nav class="navbar navbar-light bg-light shadow-sm py-3">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand fw-bold text-dark" href="/">BulkBase</a>
        <div class="d-flex align-items-center gap-3">
            <a class="nav-link custom-nav-link" href="/">Start</a>
            <a class="nav-link custom-nav-link" href="/products">Produkte</a>
            @if (role == "admin")
            {
                <a class="nav-link custom-nav-link" href="/admin">Admin</a>
            }
        </div>
        <div class="d-flex align-items-center gap-3">
            <button class="btn logout-btn fw-semibold" @onclick="Logout">Ausloggen</button>
            <a class="nav-link position-relative" href="/cart">
                <img src="images/warenkorb.jpg" alt="Cart" style="height: 30px;" />
            </a>
        </div>
    </div>
</nav>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger text-center m-3">@ErrorMessage</div>
}

@if (product == null)
{
    <div class="container text-center mt-5">
        <h2>Produkt nicht gefunden</h2>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-12 col-md-2 d-none d-md-block">
                <img src="@product.Image" class="thumbnail-img img-thumbnail" />
                <img src="@product.Image" class="thumbnail-img img-thumbnail" />
                <img src="@product.Image" class="thumbnail-img img-thumbnail" />
            </div>

            <div class="col-12 col-md-5 text-center mb-4 mb-md-0">
                <img src="@product.Image" class="img-fluid rounded" style="max-height: 350px;" />
            </div>

            <div class="col-12 col-md-5">
                <h2>@product.Name</h2>

                @if (productReviews.Count > 0)
                {
                    <div class="text-warning mb-2">
                        ⭑ @avgRating.ToString("0.0") <span class="text-muted">(@productReviews.Count Bewertungen)</span>
                    </div>
                }
                else
                {
                    <div class="text-muted mb-2">Noch keine Bewertungen</div>
                }

                <p class="fs-4 fw-bold">@product.Price.ToString("0.00")€</p>
                <p>@product.Description</p>

                <p class="@GetStockClass() fw-bold">@GetStockMessage()</p>
                <p>Noch verfügbar: @product.InStock</p>

                <div class="input-group mb-3" style="max-width: 150px;">
                    <button class="btn btn-outline-secondary" @onclick="DecreaseQuantity">-</button>
                    <input type="text" class="form-control text-center" value="@quantity" readonly />
                    <button class="btn btn-outline-secondary" @onclick="IncreaseQuantity">+</button>
                </div>

                <button class="btn text-white w-100 mb-3" style="background-color:#C30017;" @onclick="AddToCart">
                    Zum Warenkorb hinzufügen
                </button>

                <div class="border p-3 rounded">
                    <p><strong>🚚 Kostenlose Lieferung</strong></p>
                    <p>Postleitzahl eingeben für mehr Lieferdetails</p>
                    <hr />
                    <p><strong>🔁 Rücksendung</strong></p>
                    <p>Kostenlos für 30 Tage</p>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-5">
        <h3>Produkt bewerten</h3>

        @if (!string.IsNullOrEmpty(ReviewMessage))
        {
            <div class="alert alert-info">@ReviewMessage</div>
        }

        <div class="mb-3" style="max-width: 400px;">
            <label class="form-label">Sternebewertung (1–5):</label>
            <input type="number" class="form-control" min="1" max="5" @bind="rating" />
        </div>

        <div class="mb-3" style="max-width: 600px;">
            <label class="form-label">Kommentar:</label>
            <textarea class="form-control" rows="4" @bind="comment"></textarea>
        </div>

        <button class="btn btn-primary" @onclick="SubmitReview">Review absenden</button>
    </div>

    <div class="container mt-5">
        @if (productReviews.Count > 0)
        {
            <h4>Alle Bewertungen</h4>
            @foreach (var r in productReviews)
            {
                <div class="card my-3">
                    <div class="card-body">
                        <h5 class="card-title">Bewertung: @r.Rating ★</h5>
                        <h6 class="card-subtitle mb-2 text-muted">von @r.Username</h6>
                        <p class="card-text">@r.Text</p>
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-muted">Noch keine Bewertungen vorhanden.</p>
        }
    </div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product? product;
    private int quantity = 1;
    private string ErrorMessage = string.Empty;
    private int rating = 5;
    private string comment = string.Empty;
    private string ReviewMessage = "";
    private List<Review> productReviews = new();
    private double avgRating = 0.0;
    private bool _initialized = false;
    private string? username;
    private string? role;
  

    
    protected override async Task OnInitializedAsync()
    {
        product = await Db.Products.FirstOrDefaultAsync(p => p.ProductId == ProductId);
        await LoadReviews();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            var username = await LocalStorage.GetUsername();
            role = await LocalStorage.GetRole();

            if (string.IsNullOrEmpty(username))
            {
                Navigation.NavigateTo("/login", forceLoad: true);
            }

            StateHasChanged(); // <--- zwingt das UI zu einem Re-Render
        }
    }

    private async Task LoadReviews()
    {
        if (product != null)
        {
            productReviews = Ss.GetReviewsForProduct(product.ProductId);
            avgRating = productReviews.Count > 0 ? productReviews.Average(r => r.Rating) : 0.0;
        }
    }

    private async Task SubmitReview()
    {
        if (product == null || rating < 1 || rating > 5)
        {
            ReviewMessage = "Bitte eine Bewertung zwischen 1 und 5 Sternen abgeben.";
            return;
        }

        var username = await LocalStorage.GetUsername();

        try
        {
            Ss.WriteReview(username, product.ProductId, rating, comment);
            ReviewMessage = "Danke für dein Feedback!";
            comment = "";
            rating = 5;
            await LoadReviews();
        }
        catch (Exception ex)
        {
            ReviewMessage = "Fehler beim Speichern der Bewertung: " + ex.Message;
        }
    }

    private void IncreaseQuantity() => quantity++;

    private void DecreaseQuantity()
    {
        if (quantity > 1)
            quantity--;
    }

    private async Task Logout()
    {
        await LocalStorage.ClearUserData();
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private async Task AddToCart()
    {
        ErrorMessage = string.Empty;
        if (product != null)
        {
            var username = await LocalStorage.GetUsername();
            var success = Ss.AddToCart(username, product.ProductId, quantity);
            if (!success)
            {
                ErrorMessage = "Nicht genügend Lagerbestand verfügbar.";
            }
        }
    }

    private string GetStockMessage() =>
        product != null && product.InStock > 0 ? "✔ Lagernd" : "❌ Nicht lagernd";

    private string GetStockClass() =>
        product != null && product.InStock > 0 ? "text-success" : "text-danger";
}
