@page "/login"
@rendermode InteractiveServer
@using ECommerceShop.Configurations
@using ECommerceShop.DLL
@using ECommerceShop.Entities

@inject ShopContext Db
@inject IStoreService StoreService
@inject NavigationManager Navigation
@inject SessionState Session
@inject LocalStorageService LocalStorage

<style>
    body {
        background-color: white;
    }

    .login-wrapper {
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .login-box {
        background-color: white;
        padding: 2.5rem;
        border: 1px solid #e5e5e5;
        border-radius: 8px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }

    .login-title {
        font-size: 2rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 0.25rem;
    }

    .login-subtitle {
        font-size: 0.9rem;
        color: #444;
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-size: 0.9rem;
        font-weight: 500;
        text-align: left;
        margin-bottom: 0.25rem;
    }

    .form-input {
        width: 100%;
        padding: 0.6rem 0.75rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 6px;
        margin-bottom: 1rem;
    }

    .form-button {
        width: 100%;
        background-color: #1f1f1f;
        color: white;
        padding: 0.75rem;
        font-size: 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }
    .form-button-register {
        width: 100%;
        background-color: grey;
        color: white;
        padding: 0.75rem;
        font-size: 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        margin-top: 10px;
    }

    .form-button:hover {
        background-color: #333;
    }
</style>

<div class="login-wrapper">
    <div class="login-box">
        <div class="login-title">BulkBase</div>
        <div class="login-subtitle">Anmeldung</div>

        <form @onsubmit="HandleLogin">
            <label class="form-label">Email</label>
            <input type="email" @bind="email" class="form-input" placeholder="Email" required />

            <label class="form-label">Passwort</label>
            <input type="password" @bind="password" class="form-input" placeholder="Passwort" required />

            <label class="form-label">Name</label>
            <input type="text" @bind="username" class="form-input" placeholder="Name" required />

            <button type="submit" class="form-button">Anmelden</button>
            <button type="button" class="form-button-register" @onclick="HandleRegister">Registrieren</button>
        </form>

        @if (!string.IsNullOrEmpty(message))
        {
            <p class="text-center mt-3 text-danger">@message</p>
        }
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    private bool _hasRedirected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasRedirected)
        {
            _hasRedirected = true;

            var storedUsername = await LocalStorage.GetUsername();
            var storedRole = await LocalStorage.GetRole();

            if (!string.IsNullOrEmpty(storedUsername) && !string.IsNullOrEmpty(storedRole))
            {
                if (storedRole == "admin")
                    Navigation.NavigateTo("/Admin", forceLoad: true);
                else
                    Navigation.NavigateTo("/", forceLoad: true);
            }
        }
    }

    private async Task HandleLogin()
    {
        bool success = StoreService.Login(email, username, password, out var role);
        if (success)
        {
            await LocalStorage.SetUserData(username, email, role);
            Navigation.NavigateTo(role == "admin" ? "/Admin" : "/", forceLoad: true);
        }
        else
        {
            message = "Login fehlgeschlagen. Falsche Daten.";
        }
    }

    private void HandleRegister()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            message = "Bitte fülle alle Felder korrekt aus.";
            return;
        }

        try
        {
            string registerMessage;
            bool registered = StoreService.RegisterUser(email.Trim(), username.Trim(), password.Trim(), out registerMessage);
            message = registered ? $" {registerMessage}" : $"Registrierung fehlgeschlagen: {registerMessage}";
        }
        catch (Exception ex)
        {
            message = $"Ein Fehler ist aufgetreten: {ex.Message}";
        }
    }
}
