@page "/cart"
@using ECommerceShop.DLL
@using ECommerceShop.Entities

@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject IStoreService StoreService
@inject SessionState Session
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject LocalStorageService LocalStorage
<nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm py-3">
    <div class="container-fluid d-flex justify-content-between align-items-center">

        <!-- Logo -->
        <a class="navbar-brand fw-bold fs-3 text-dark" href="/" style="margin-right: 30px;">
            BulkBase
        </a>

        <!-- Navigation Buttons -->
        <div class="d-flex align-items-center gap-2">
            <a class="nav-link custom-nav-link" href="/">Start</a>
            <a class="nav-link custom-nav-link" href="/products">Produkte</a>
        </div>

        <!-- Sign Out + Cart -->
        <div class="d-flex align-items-center gap-3">
            <button class="btn logout-btn fw-semibold" @onclick="Logout">Ausloggen</button>
            <a class="nav-link position-relative" href="/cart">
                <img src="images/warenkorb.jpg" alt="Cart" style="height: 30px;" />
            </a>
        </div>
    </div>
</nav>
<style>
    .custom-nav-link {
        color: black;

        font-weight: 500;

        font-size: 1.2rem;
        padding: 7px 14px;
        border-radius: 6px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .custom-nav-link:hover {
        background-color: #f0f0f0;
        color: #000;
        text-decoration: none;
    }

    .logout-btn {
        background-color: transparent;
        border: 2px solid #1f1f1f;
        color: #1f1f1f;
        padding: 6px 16px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .logout-btn:hover {
        background-color: #1f1f1f;
        color: white;
    }
</style>
@code {
    private async Task Logout()
    {
        await LocalStorage.ClearUserData();
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}


<div class="container mt-5">
    <div class="row">
        <div class="col-md-7">
            <h3 class="fw-bold">Dein Warenkorb</h3>
            <p>@cartItems.Count Artikel</p>

            @foreach (var item in cartItems)
            {
                <div class="d-flex mb-4">
                    <img src="@item.Product.Image" alt="@item.Product.Name" style="width: 120px; height: 120px; object-fit: cover;" class="me-3" />

                    <div class="flex-grow-1">
                        <h5 class="fw-bold mb-1">@item.Product.Name</h5>
                        <p class="mb-1">Größe: Einheitsgröße<br />Farbe: Schwarz</p>
                        <a href="/cart" class="text-danger text-decoration-none d-block mb-2"
                           @onclick="() => RemoveItem(item.Product.ProductId)">Entfernen</a>

                        <div class="input-group" style="width: 120px;">
                            <input type="text" class="form-control text-center" value="@item.QuantityOrdered" readonly />
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-5">
            <div class="border p-4 bg-light">
                <div class="d-flex justify-content-between mb-2">
                    <span>Zwischensumme:</span>
                    <span>@totalPrice.ToString("0.00")€</span>
                </div>
                <div class="d-flex justify-content-between mb-3">
                    <span>Lieferung:</span>
                    <span>0,00€</span>
                </div>
                <hr />
                <div class="d-flex justify-content-between fw-bold fs-5 mb-3">
                    <span>Gesamtwert</span>
                    <span>@totalPrice.ToString("0.00")€</span>
                </div>
                <button class="btn text-white w-100 mb-3" style="background-color: #C30017;" @onclick="CompleteCheckout">
                    Zur Kassa
                </button>

                <p class="fw-semibold mb-2">Unsere Zahlungsmethoden:</p>
                <img src="images/payments.png" alt="Zahlungsmethoden" class="mb-3" style="max-width: 100%;" />

                <ul class="ps-3 small text-muted">
                    <li>30 Tage kostenlose Retoure</li>
                    <li>2 Jahre Garantie</li>
                    <li>CO₂-neutrale Zustellung mit Ö. Post</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    private List<OrderItem> cartItems = new();
    private decimal totalPrice;
    private bool _initialized = false;
    
    private async Task CompleteCheckout()
    {
        var username = await LocalStorage.GetUsername();
        if (string.IsNullOrEmpty(username))
        {
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }

        StoreService.CompletePurchase(username); // Neuer Service-Aufruf

        // Leeren Warenkorb anzeigen
        cartItems.Clear();
        totalPrice = 0;

        // Weiterleitung (optional)
        Navigation.NavigateTo("/dummycheckout", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            var username = await LocalStorage.GetUsername();
            if (string.IsNullOrEmpty(username))
            {
                Navigation.NavigateTo("/login", forceLoad: true);
            }
        }
    }
    protected override void OnInitialized()
    {
       
        LoadCart();
    }

    private void LoadCart()
    {
        cartItems = StoreService.GetItemsByUser("h.muster");
        totalPrice = cartItems.Sum(i => i.Product.Price * i.QuantityOrdered);
    }

    private void RemoveItem(int productId)
    {
        StoreService.RemoveFromCart("h.muster", productId);
        LoadCart(); // neu laden
    }
}
